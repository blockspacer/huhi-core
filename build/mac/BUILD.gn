import("//huhi/build/config.gni")
import("//build/config/mac/base_rules.gni")
import("//build/util/branding.gni")
import("//build/util/version.gni")
import("//chrome/common/features.gni")
import("//third_party/widevine/cdm/widevine.gni")

declare_args() {
  # find with `security find-identity -v -p codesigning`
  mac_signing_identifier = ""
  mac_installer_signing_identifier = ""
  mac_signing_keychain = "login"
  mac_signing_output_prefix = "signing"
  mac_signed_output_prefix = "signed"
  mac_notarized_output_prefix = "notarized"
  notary_user = ""
  notary_password = ""
  notary_asc_provider = chrome_mac_team_id
  notarize = false
  notarize_argument = "False"
}

if (!skip_signing) {
  target_sign_app_path = "$root_out_dir/$mac_signing_output_prefix/" + string_replace("$chrome_product_full_name", " ", "") + "-$chrome_version_full/$huhi_exe"
  packaging_dir = "$root_out_dir/" + string_replace("$chrome_product_full_name Packaging", " ", "_")
  unsigned_pkg_path = "$root_out_dir/unsigned/$huhi_pkg"
  keychain_db = getenv("HOME") + "/Library/Keychains/${mac_signing_keychain}.keychain-db"
}

group("huhi") {
  if (skip_signing) {
    app_path = "$root_out_dir/$chrome_product_full_name.app"
  } else {
    app_path = target_sign_app_path
  }

  exe_path = "$app_path/Contents/MacOS/$chrome_product_full_name"

  write_file("$root_out_dir/huhi_helper", [ string_replace(rebase_path(exe_path), " ", "\\ ") + " \$@" ])
}

ds_store_file_name = "DS_Store"
dmg_icon_file_name = "dmg"

if (huhi_channel != "") {
  ds_store_file_name = "DS_Store.$huhi_channel"
  dmg_icon_file_name = "dmg-$huhi_channel"
}
dmg_background_image = rebase_path("//huhi/build/mac/dmg-background.png")
ds_store = rebase_path("//huhi/build/mac/$ds_store_file_name")
dmg_icon = rebase_path("//huhi/build/mac/$dmg_icon_file_name.icns")

if (skip_signing) {
  action("unsigned_dmg") {
    huhi_app = "$root_build_dir/$huhi_exe"
    output = "$root_out_dir/unsigned_dmg/$huhi_dmg"
    script = "//build/gn_run_binary.py"
    shell_script = "//chrome/installer/mac/pkg-dmg"

    inputs = [
      script,
      shell_script,
    ]
    outputs = [ output ]
    args = [
      rebase_path(shell_script, root_build_dir),
      "--source", "/var/empty",
      "--target", "unsigned_dmg/$huhi_dmg",
      "--format", "UDBZ",
      "--verbosity", "0",
      "--volname", "$chrome_product_full_name",
      "--copy", rebase_path(huhi_app, root_build_dir),
      "--tempdir", "/tmp",
      "--mkdir", ".background",
      "--copy", "$dmg_background_image:/.background/dmg-background.png",
      "--copy", "$ds_store:/.DS_Store",
      "--icon", "$dmg_icon",
      "--symlink", "/Applications",
    ]

    deps = [
      "//chrome:chrome_app",
      "//chrome/installer/mac"
    ]

    if (enable_widevine_cdm_host_verification) {
      deps += [ ":sign_chrome_framework_for_widevine" ]
    }
  }

  if (enable_widevine_cdm_host_verification) {
    action("sign_chrome_framework_for_widevine") {
      script = "//third_party/widevine/scripts/signature_generator.py"

      chrome_framework_name = chrome_product_full_name + " Framework"
      target_app_path = "$root_out_dir/$chrome_product_full_name.app"

      huhi_version_path = "$target_app_path/Contents/Frameworks/$chrome_framework_name.framework/Versions/$chrome_version_full"
      framework_file = "$huhi_version_path/$chrome_framework_name"
      signature_file = "$huhi_version_path/Resources/$chrome_framework_name.sig"

      flags = 1  # blessed binary

      sources = [
        "$root_out_dir/$huhi_exe"
      ]

      outputs = [
        signature_file,
      ]

      args = [
        "--input_file",
        rebase_path(framework_file, root_build_dir),
        "--output_file",
        rebase_path(signature_file, root_build_dir),
        "--flags",
        "$flags",
        "--certificate",
        getenv("SIGN_WIDEVINE_CERT"),
        "--private_key",
        getenv("SIGN_WIDEVINE_KEY"),
        "--private_key_passphrase",
        getenv("SIGN_WIDEVINE_PASSPHRASE"),
      ]

      deps = [ "//chrome:chrome_app" ]
    }
  }
} else {
  action("sign_app") {
    script = "//build/gn_run_binary.py"
    shell_script = "//huhi/build/mac/sign_app.sh"

    deps = [
      "//chrome:chrome_app",
      "//chrome/installer/mac",
      ":copies",
    ]

    if (is_official_build) {
      if (huhi_channel == "") {
        provisioning_profile = "//huhi/build/mac/release.provisionprofile"
      } else {
        provisioning_profile = "//huhi/build/mac/${huhi_channel}.provisionprofile"
      }
      is_development = "False"
    } else {
      # an empty dummy file just to simplify things
      provisioning_profile = "//huhi/build/mac/dummy.provisionprofile"
      is_development = "True"
    }
    if (notarize) {
      notarize_argument = "True"
    }

    inputs = [
      script,
      shell_script,
      "$root_build_dir/$huhi_exe",
      provisioning_profile,
      "$packaging_dir/app-entitlements.plist",
    ]
    outputs = [ target_sign_app_path ]
    args = [
      rebase_path(shell_script, root_out_dir),

      # Use absolute paths needed by codesign
      rebase_path(root_build_dir),
      rebase_path("$root_out_dir/$mac_signing_output_prefix"),
      rebase_path(packaging_dir),
      is_development,
      rebase_path(provisioning_profile, root_out_dir),
      mac_signing_identifier,
      notarize_argument,
      notary_user,
      notary_password,
      notary_asc_provider
    ]
  }

  copy("copies") {
    visibility = [ ":sign_app" ]

    sources = [
      "//huhi/app/helper-entitlements.plist",
    ]

    outputs = [
      "$packaging_dir/{{source_file_part}}"
    ]
  }

  action("create_pkg") {
    script = "//build/gn_run_binary.py"
    shell_script = "//huhi/build/mac/create_pkg.sh"
    inputs = [
      script,
      target_sign_app_path,
      shell_script,
    ]
    outputs = [ unsigned_pkg_path ]
    args = [
      rebase_path(shell_script, root_build_dir),
      rebase_path(target_sign_app_path, root_build_dir),
      rebase_path("//huhi/build/mac/pkg-scripts"),
      rebase_path("$root_out_dir/Huhi Browser Component.plist"),
      "unsigned/$huhi_pkg",
    ]

    deps = [":sign_app"]
  }

  action("sign_pkg") {
    script = "//build/gn_run_binary.py"
    shell_script = "sign_pkg.sh"
    inputs = [
      script,
      shell_script,
      unsigned_pkg_path,
    ]
    outputs = [ "${root_out_dir}/$mac_signed_output_prefix/$huhi_pkg" ]
    args = [
      rebase_path(shell_script, root_build_dir),
      rebase_path(unsigned_pkg_path),
      rebase_path("$root_out_dir/$mac_signed_output_prefix/$huhi_pkg"),
      keychain_db,
      mac_installer_signing_identifier,
    ]

    deps = [":create_pkg"]
  }

  unsigned_dmg = "$root_out_dir/unsigned/$huhi_dmg"
  action("create_dmg") {
    script = "//build/gn_run_binary.py"
    shell_script = "//chrome/installer/mac/pkg-dmg"
    inputs = [
      script,
      shell_script,
      target_sign_app_path,
    ]
    outputs = [ unsigned_dmg ]
    args = [
      rebase_path(shell_script, root_build_dir),
      "--source", "/var/empty",
      "--target", "unsigned/$huhi_dmg",
      "--format", "UDBZ",
      "--verbosity", "2",
      "--volname", "$chrome_product_full_name",
      "--copy", rebase_path(target_sign_app_path, root_build_dir),
      "--tempdir", "/tmp",
      "--mkdir", ".background",
      "--copy", "$dmg_background_image:/.background/dmg-background.png",
      "--copy", "$ds_store:/.DS_Store",
      "--icon", "$dmg_icon",
      "--symlink", "/Applications",
    ]

    deps = [":sign_app"]
  }

  action("sign_dmg") {
    script = "//build/gn_run_binary.py"
    shell_script = "sign_dmg.sh"
    inputs = [
      script,
      shell_script,
      unsigned_dmg,
    ]
    outputs = [ "${root_out_dir}/$mac_signed_output_prefix/$huhi_dmg" ]
    args = [
      rebase_path(shell_script, root_build_dir),
      rebase_path(unsigned_dmg),
      rebase_path("$root_out_dir/$mac_signed_output_prefix/$huhi_dmg"),
      keychain_db,
      mac_signing_identifier,
      "-r=designated => identifier \"$chrome_product_full_name\" and certificate leaf = H\"$mac_signing_identifier\"",
    ]

    deps = [":create_dmg"]
  }

  group("finalize_dmg_pkg") {
    deps = [
      ":copy_dmg_pkg"
    ]
  }

  copy("copy_notarize_script") {

    sources = [ "notarize_dmg_pkg.py" ]

    outputs = [
      "$packaging_dir/{{source_file_part}}"
    ]

  }

  action("notarize_dmg_pkg") {
    if (is_official_build) {
      development_arg = ""
      if (huhi_channel == "") {
        provisioning_profile = "//huhi/build/mac/release.provisionprofile"
      } else {
        provisioning_profile = "//huhi/build/mac/${huhi_channel}.provisionprofile"
      }
    } else {
      development_arg = "--development"
      provisioning_profile = "//huhi/build/mac/dummy.provisionprofile"
    }

    script = "$packaging_dir/notarize_dmg_pkg.py"
    inputs = [
      script,
      "$root_out_dir/$mac_signed_output_prefix/$huhi_dmg",
      "$root_out_dir/$mac_signed_output_prefix/$huhi_pkg",
    ]
    outputs = [
      "$root_out_dir/$mac_notarized_output_prefix/$huhi_dmg",
      "$root_out_dir/$mac_notarized_output_prefix/$huhi_pkg",
    ]
    args = [
      "--identity",
      mac_signing_identifier,
      "--notary-user",
      notary_user,
      "--notary-password",
      notary_password,
      "--notary-asc-provider",
      notary_asc_provider,
      development_arg,
      "--dmg",
      rebase_path("$root_out_dir/$mac_signed_output_prefix/$huhi_dmg"),
      "--pkg",
      rebase_path("$root_out_dir/$mac_signed_output_prefix/$huhi_pkg"),
      "--signed",
      rebase_path("$root_out_dir/$mac_signed_output_prefix"),
      "--outdir",
      rebase_path("$root_out_dir/$mac_notarized_output_prefix"),
      "--pkgdir",
      rebase_path(packaging_dir),
      "--mac_provisioning_profile",
      rebase_path(provisioning_profile),
    ]
    deps = [
      ":sign_dmg",
      ":sign_pkg",
      ":copy_notarize_script"
    ]
  }

  copy("copy_dmg_pkg") {
    if (notarize) {
      sources = [
        "$root_out_dir/$mac_notarized_output_prefix/$huhi_dmg",
        "$root_out_dir/$mac_notarized_output_prefix/$huhi_pkg",
      ]
      deps = [
        ":copy_notarize_script",
        ":notarize_dmg_pkg",
      ]
    } else {
      sources = [
        "$root_out_dir/$mac_signed_output_prefix/$huhi_dmg",
        "$root_out_dir/$mac_signed_output_prefix/$huhi_pkg",
      ]
      deps = [
        ":sign_dmg",
        ":sign_pkg"
      ]
    }
    outputs = [
      "$root_out_dir/{{source_file_part}}"
    ]

  }
}
